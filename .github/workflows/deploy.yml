name: Deploy to Amazon ECR

on:
    push:
        branches: ["main"]

env:
    AWS_REGION: ap-northeast-2
    ECR_REPOSITORY: devlog
    IMAGE_TAG: ${{ github.sha }}

jobs:
    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        environment: production

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}
            - name: Get GitHub Actions IP
              id: ip
              uses: haythem/public-ip@v1.2

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Clean up old images
              run: |
                  IMAGES_TO_DELETE=$(aws ecr list-images --repository-name $ECR_REPOSITORY --query 'imageIds[?type(imageTag)!=`null`].[imageDigest]' --output text)
                  if [ ! -z "$IMAGES_TO_DELETE" ]; then
                    aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids "$IMAGES_TO_DELETE" || true
                  fi

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
            - name: Get GitHub Actions IP ranges
              id: ip_ranges
              run: |
                  ACTIONS_RANGES=$(curl -s https://api.github.com/meta | jq -r '.actions | join(",")')
                  echo "::set-output name=ranges::$ACTIONS_RANGES"

            - name: Update EC2 security group
              run: |
                  aws ec2 authorize-security-group-ingress \
                    --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
                    --protocol tcp \
                    --port 22 \
                    --cidr ${{ steps.ip.outputs.ipv4 }}/32

            - name: Setup SSH key
              env:
                  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
              run: |
                  mkdir -p ~/.ssh
                  echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

            - name: Deploy to EC2
              env:
                  HOST: ${{ secrets.EC2_HOST }}
                  USER: ubuntu
              run: |
                  ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${USER}@${HOST} << EOF
                  sudo -i
                  systemctl stop nginx
                  systemctl disable nginx
                  sudo aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
                  sudo docker pull ${{ steps.build-image.outputs.image }}
                  sudo docker stop devlog || true
                  sudo docker rm devlog || true
                  sudo docker run -d --name devlog -p 80:3000 ${{ steps.build-image.outputs.image }}
                  exit
