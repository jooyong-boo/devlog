datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id       String @id
  email    String @unique @db.VarChar(255)
  nickname String @unique @db.VarChar(30)
  profile  String
  oauthId  Int?    @map("oauth_id")
  roleId   Int    @map("role_id")

  createdAt  DateTime  @default(now()) @map("created_at")
  createUser String    @default("_system") @map("create_user")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  updateUser String    @default("_system") @map("update_user")
  deletedAt  DateTime? @map("deleted_at")
  deleteUser String?   @map("delete_user")

  oauthProvider UsersOAuthProviders? @relation(fields: [oauthId], references: [id])
  role          UsersRoles          @relation(fields: [roleId], references: [id])
  posts         Posts[]
  postComments  PostComments[]

  @@index([email, nickname])
}

model UsersOAuthProviders {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  createdAt  DateTime  @default(now()) @map("created_at")
  createUser String    @default("_system") @map("create_user")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  updateUser String    @default("_system") @map("update_user")
  deletedAt  DateTime? @map("deleted_at")
  deleteUser String?   @map("delete_user")

  users Users[]

  @@index([name])
}

model UsersRoles {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(20)

  createdAt  DateTime  @default(now()) @map("created_at")
  createUser String    @default("_system") @map("create_user")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  updateUser String    @default("_system") @map("update_user")
  deletedAt  DateTime? @map("deleted_at")
  deleteUser String?   @map("delete_user")

  users Users[]

  @@index([name])
}

model Tags {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(20)

  createdAt  DateTime  @default(now()) @map("created_at")
  createUser String    @default("_system") @map("create_user")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  updateUser String    @default("_system") @map("update_user")
  deletedAt  DateTime? @map("deleted_at")
  deleteUser String?   @map("delete_user")

  postTag PostTags[]
}

model Posts {
  id        String  @id @db.VarChar(255)
  title     String  @db.VarChar(255)
  content   String  @db.Text
  thumbnail String?  @default("https://devlog-production.s3.ap-northeast-2.amazonaws.com/common/default.png") @db.VarChar(255)
  published Boolean @default(true)
  projectId Int     @map("project_id")
  viewCount Int     @default(0) @map("view_cnt")

  createdAt  DateTime  @default(now()) @map("created_at")
  createUser String    @default("_system") @map("create_user")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  updateUser String    @default("_system") @map("update_user")
  deletedAt  DateTime? @map("deleted_at")
  deleteUser String?   @map("delete_user")

  usersId String? @map("user_id")

  users        Users?         @relation(fields: [usersId], references: [id])
  postComments PostComments[]
  postTag         PostTags[]
  project      Projects       @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model PostsViewTrends {
  id    Int @id @default(autoincrement())
  count Int

  createdAt  DateTime  @default(now()) @map("created_at")
  createUser String    @default("_system") @map("create_user")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  updateUser String    @default("_system") @map("update_user")
  deletedAt  DateTime? @map("deleted_at")
  deleteUser String?   @map("delete_user")
}

model PostTags {
  postId String @map("post_id") @db.VarChar(255)
  tagId  Int    @map("tag_id")

  createdAt  DateTime  @default(now()) @map("created_at")
  createUser String    @default("_system") @map("create_user")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  updateUser String    @default("_system") @map("update_user")
  deletedAt  DateTime? @map("deleted_at")
  deleteUser String?   @map("delete_user")

  posts Posts @relation(fields: [postId], references: [id])
  tags  Tags  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
  @@index([tagId])
}

model PostComments {
  id       Int    @id @default(autoincrement())
  postId   String @map("post_id")
  parentId Int?   @map("parent_id")
  userId   String @map("user_id")
  content  String

  parent  PostComments?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies PostComments[] @relation("CommentReplies")

  createdAt  DateTime  @default(now()) @map("created_at")
  createUser String    @default("_system") @map("create_user")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  updateUser String    @default("_system") @map("update_user")
  deletedAt  DateTime? @map("deleted_at")
  deleteUser String?   @map("delete_user")

  post Posts @relation(fields: [postId], references: [id])
  user Users @relation(fields: [userId], references: [id])

  @@index([postId])
}

model Projects {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(20)
  image String? @db.VarChar(255)
  desc  String  @db.VarChar(255)
  sort  Int

  createdAt  DateTime  @default(now()) @map("created_at")
  createUser String    @default("_system") @map("create_user")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  updateUser String    @default("_system") @map("update_user")
  deletedAt  DateTime? @map("deleted_at")
  deleteUser String?   @map("delete_user")

  posts Posts[]
}
